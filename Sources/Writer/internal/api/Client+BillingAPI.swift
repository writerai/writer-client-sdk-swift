// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.


import Foundation

extension Client: BillingAPI { 
    public func getSubscriptionDetails() async throws -> Operations.GetSubscriptionDetailsResponse {
        return try await makeRequest(
            configureRequest: { configuration in
                try configureGetSubscriptionDetailsRequest(with: configuration)
            },
            handleResponse: handleGetSubscriptionDetailsResponse
        )
    }
}

// MARK: - Request Configuration

private func configureGetSubscriptionDetailsRequest(with configuration: URLRequestConfiguration) throws {
    configuration.path = "/billing/subscription"
    configuration.method = .get
    configuration.telemetryHeader = .userAgent
}

// MARK: - Response Handlers

private func handleGetSubscriptionDetailsResponse(response: WriterResponse) throws -> Operations.GetSubscriptionDetailsResponse {
    var responseObject = Operations.GetSubscriptionDetailsResponse(
        contentType: response.contentType,
        statusCode: response.statusCode,
        rawResponse: response.httpResponse
    )
    
    if responseObject.statusCode == 200 { 
        // res.headers = r.headers
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.subscriptionPublicResponseApi = try JSONDecoder().decode(Shared.SubscriptionPublicResponseApi.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    } else if [400, 401, 403, 404, 500].contains(responseObject.statusCode) { 
        // res.headers = r.headers
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.failResponse = try JSONDecoder().decode(Shared.FailResponse.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return responseObject
}

