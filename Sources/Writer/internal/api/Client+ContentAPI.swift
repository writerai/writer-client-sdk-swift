// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.


import Foundation

extension Client: ContentAPI { 
    public func contentCheck(request: Operations.ContentCheckRequest) async throws -> Operations.ContentCheckResponse {
        return try await makeRequest(
            configureRequest: { configuration in
                try configureContentCheckRequest(with: configuration, request: request)
            },
            handleResponse: handleContentCheckResponse
        )
    }
    public func contentCorrect(request: Operations.ContentCorrectRequest) async throws -> Operations.ContentCorrectResponse {
        return try await makeRequest(
            configureRequest: { configuration in
                try configureContentCorrectRequest(with: configuration, request: request)
            },
            handleResponse: handleContentCorrectResponse
        )
    }
}

// MARK: - Request Configuration

private func configureContentCheckRequest(with configuration: URLRequestConfiguration, request: Operations.ContentCheckRequest) throws {
    configuration.path = "/content/organization/{organizationId}/team/{teamId}/check"
    configuration.method = .post
    configuration.pathParameterSerializable = request
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request.contentRequest)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .userAgent
}

private func configureContentCorrectRequest(with configuration: URLRequestConfiguration, request: Operations.ContentCorrectRequest) throws {
    configuration.path = "/content/organization/{organizationId}/team/{teamId}/correct"
    configuration.method = .post
    configuration.pathParameterSerializable = request
    configuration.headerParameterSerializable = request
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request.contentRequest)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .userAgent
}

// MARK: - Response Handlers

private func handleContentCheckResponse(response: WriterResponse) throws -> Operations.ContentCheckResponse {
    var responseObject = Operations.ContentCheckResponse(
        contentType: response.contentType,
        statusCode: response.statusCode,
        rawResponse: response.httpResponse
    )
    
    if responseObject.statusCode == 200 { 
        // res.headers = r.headers
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.processedContent = try JSONDecoder().decode(Shared.ProcessedContent.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    } else if [400, 401, 403, 404, 500].contains(responseObject.statusCode) { 
        // res.headers = r.headers
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.failResponse = try JSONDecoder().decode(Shared.FailResponse.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return responseObject
}

private func handleContentCorrectResponse(response: WriterResponse) throws -> Operations.ContentCorrectResponse {
    var responseObject = Operations.ContentCorrectResponse(
        contentType: response.contentType,
        statusCode: response.statusCode,
        rawResponse: response.httpResponse
    )
    
    if responseObject.statusCode == 200 { 
        // res.headers = r.headers
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.correctionResponse = try JSONDecoder().decode(Shared.CorrectionResponse.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    } else if [400, 401, 403, 404, 500].contains(responseObject.statusCode) { 
        // res.headers = r.headers
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.failResponse = try JSONDecoder().decode(Shared.FailResponse.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return responseObject
}

