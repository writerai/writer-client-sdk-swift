// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.


import Foundation

extension Client: FilesAPI { 
    public func deleteFile(request: Operations.DeleteFileRequest) async throws -> Operations.DeleteFileResponse {
        return try await makeRequest(
            configureRequest: { configuration in
                try configureDeleteFileRequest(with: configuration, request: request)
            },
            handleResponse: handleDeleteFileResponse
        )
    }
    public func getFile(request: Operations.GetFileRequest) async throws -> Operations.GetFileResponse {
        return try await makeRequest(
            configureRequest: { configuration in
                try configureGetFileRequest(with: configuration, request: request)
            },
            handleResponse: handleGetFileResponse
        )
    }
    public func listFiles(request: Operations.ListFilesRequest) async throws -> Operations.ListFilesResponse {
        return try await makeRequest(
            configureRequest: { configuration in
                try configureListFilesRequest(with: configuration, request: request)
            },
            handleResponse: handleListFilesResponse
        )
    }
    public func uploadFile(request: Operations.UploadFileRequest) async throws -> Operations.UploadFileResponse {
        return try await makeRequest(
            configureRequest: { configuration in
                try configureUploadFileRequest(with: configuration, request: request)
            },
            handleResponse: handleUploadFileResponse
        )
    }
}

// MARK: - Request Configuration

private func configureDeleteFileRequest(with configuration: URLRequestConfiguration, request: Operations.DeleteFileRequest) throws {
    configuration.path = "/llm/organization/{organizationId}/file/{fileId}"
    configuration.method = .delete
    configuration.pathParameterSerializable = request
    configuration.telemetryHeader = .userAgent
}

private func configureGetFileRequest(with configuration: URLRequestConfiguration, request: Operations.GetFileRequest) throws {
    configuration.path = "/llm/organization/{organizationId}/file/{fileId}"
    configuration.method = .get
    configuration.pathParameterSerializable = request
    configuration.telemetryHeader = .userAgent
}

private func configureListFilesRequest(with configuration: URLRequestConfiguration, request: Operations.ListFilesRequest) throws {
    configuration.path = "/llm/organization/{organizationId}/file"
    configuration.method = .get
    configuration.pathParameterSerializable = request
    configuration.telemetryHeader = .userAgent
}

private func configureUploadFileRequest(with configuration: URLRequestConfiguration, request: Operations.UploadFileRequest) throws {
    configuration.path = "/llm/organization/{organizationId}/file"
    configuration.method = .post
    configuration.pathParameterSerializable = request
    let (boundary, formData) = try serializeMultipartFormData(with: request.uploadModelFileRequest)
    configuration.contentType = multipartContentType(with: boundary)
    configuration.body = formData
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .userAgent
}

// MARK: - Response Handlers

private func handleDeleteFileResponse(response: WriterResponse) throws -> Operations.DeleteFileResponse {
    var responseObject = Operations.DeleteFileResponse(
        contentType: response.contentType,
        statusCode: response.statusCode,
        rawResponse: response.httpResponse
    )
    
    if responseObject.statusCode == 200 { 
        // res.headers = r.headers
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.deleteFile200ApplicationJSONObject = try JSONDecoder().decode(Operations.DeleteFile200ApplicationJSON.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    } else if [400, 401, 403, 404, 500].contains(responseObject.statusCode) { 
        // res.headers = r.headers
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.failResponse = try JSONDecoder().decode(Shared.FailResponse.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return responseObject
}

private func handleGetFileResponse(response: WriterResponse) throws -> Operations.GetFileResponse {
    var responseObject = Operations.GetFileResponse(
        contentType: response.contentType,
        statusCode: response.statusCode,
        rawResponse: response.httpResponse
    )
    
    if responseObject.statusCode == 200 { 
        // res.headers = r.headers
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.modelFile = try JSONDecoder().decode(Shared.ModelFile.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    } else if [400, 401, 403, 404, 500].contains(responseObject.statusCode) { 
        // res.headers = r.headers
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.failResponse = try JSONDecoder().decode(Shared.FailResponse.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return responseObject
}

private func handleListFilesResponse(response: WriterResponse) throws -> Operations.ListFilesResponse {
    var responseObject = Operations.ListFilesResponse(
        contentType: response.contentType,
        statusCode: response.statusCode,
        rawResponse: response.httpResponse
    )
    
    if responseObject.statusCode == 200 { 
        // res.headers = r.headers
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.modelFilesResponse = try JSONDecoder().decode(Shared.ModelFilesResponse.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    } else if [400, 401, 403, 404, 500].contains(responseObject.statusCode) { 
        // res.headers = r.headers
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.failResponse = try JSONDecoder().decode(Shared.FailResponse.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return responseObject
}

private func handleUploadFileResponse(response: WriterResponse) throws -> Operations.UploadFileResponse {
    var responseObject = Operations.UploadFileResponse(
        contentType: response.contentType,
        statusCode: response.statusCode,
        rawResponse: response.httpResponse
    )
    
    if responseObject.statusCode == 200 { 
        // res.headers = r.headers
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.modelFile = try JSONDecoder().decode(Shared.ModelFile.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    } else if [400, 401, 403, 404, 500].contains(responseObject.statusCode) { 
        // res.headers = r.headers
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.failResponse = try JSONDecoder().decode(Shared.FailResponse.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return responseObject
}

