// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.


import Foundation

extension Client: ModelCustomizationAPI { 
    public func createModelCustomization(request: Operations.CreateModelCustomizationRequest) async throws -> Operations.CreateModelCustomizationResponse {
        return try await makeRequest(
            configureRequest: { configuration in
                try configureCreateModelCustomizationRequest(with: configuration, request: request)
            },
            handleResponse: handleCreateModelCustomizationResponse
        )
    }
    public func deleteModelCustomization(request: Operations.DeleteModelCustomizationRequest) async throws -> Operations.DeleteModelCustomizationResponse {
        return try await makeRequest(
            configureRequest: { configuration in
                try configureDeleteModelCustomizationRequest(with: configuration, request: request)
            },
            handleResponse: handleDeleteModelCustomizationResponse
        )
    }
    public func getModelCustomization(request: Operations.GetModelCustomizationRequest) async throws -> Operations.GetModelCustomizationResponse {
        return try await makeRequest(
            configureRequest: { configuration in
                try configureGetModelCustomizationRequest(with: configuration, request: request)
            },
            handleResponse: handleGetModelCustomizationResponse
        )
    }
    public func listModelCustomizations(request: Operations.ListModelCustomizationsRequest) async throws -> Operations.ListModelCustomizationsResponse {
        return try await makeRequest(
            configureRequest: { configuration in
                try configureListModelCustomizationsRequest(with: configuration, request: request)
            },
            handleResponse: handleListModelCustomizationsResponse
        )
    }
}

// MARK: - Request Configuration

private func configureCreateModelCustomizationRequest(with configuration: URLRequestConfiguration, request: Operations.CreateModelCustomizationRequest) throws {
    configuration.path = "/llm/organization/{organizationId}/model/{modelId}/customization"
    configuration.method = .post
    configuration.pathParameterSerializable = request
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request.createCustomizationRequest)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .userAgent
}

private func configureDeleteModelCustomizationRequest(with configuration: URLRequestConfiguration, request: Operations.DeleteModelCustomizationRequest) throws {
    configuration.path = "/llm/organization/{organizationId}/model/{modelId}/customization/{customizationId}"
    configuration.method = .delete
    configuration.pathParameterSerializable = request
    configuration.telemetryHeader = .userAgent
}

private func configureGetModelCustomizationRequest(with configuration: URLRequestConfiguration, request: Operations.GetModelCustomizationRequest) throws {
    configuration.path = "/llm/organization/{organizationId}/model/{modelId}/customization/{customizationId}"
    configuration.method = .get
    configuration.pathParameterSerializable = request
    configuration.telemetryHeader = .userAgent
}

private func configureListModelCustomizationsRequest(with configuration: URLRequestConfiguration, request: Operations.ListModelCustomizationsRequest) throws {
    configuration.path = "/llm/organization/{organizationId}/model/{modelId}/customization"
    configuration.method = .get
    configuration.pathParameterSerializable = request
    configuration.telemetryHeader = .userAgent
}

// MARK: - Response Handlers

private func handleCreateModelCustomizationResponse(response: WriterResponse) throws -> Operations.CreateModelCustomizationResponse {
    var responseObject = Operations.CreateModelCustomizationResponse(
        contentType: response.contentType,
        statusCode: response.statusCode,
        rawResponse: response.httpResponse
    )
    
    if responseObject.statusCode == 200 { 
        // res.headers = r.headers
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.modelCustomization = try JSONDecoder().decode(Shared.ModelCustomization.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    } else if [400, 401, 403, 404, 500].contains(responseObject.statusCode) { 
        // res.headers = r.headers
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.failResponse = try JSONDecoder().decode(Shared.FailResponse.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return responseObject
}

private func handleDeleteModelCustomizationResponse(response: WriterResponse) throws -> Operations.DeleteModelCustomizationResponse {
    var responseObject = Operations.DeleteModelCustomizationResponse(
        contentType: response.contentType,
        statusCode: response.statusCode,
        rawResponse: response.httpResponse
    )
    
    if responseObject.statusCode == 200 { 
        // res.headers = r.headers
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.deleteModelCustomization200ApplicationJSONObject = try JSONDecoder().decode(Operations.DeleteModelCustomization200ApplicationJSON.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    } else if [400, 401, 403, 404, 500].contains(responseObject.statusCode) { 
        // res.headers = r.headers
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.failResponse = try JSONDecoder().decode(Shared.FailResponse.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return responseObject
}

private func handleGetModelCustomizationResponse(response: WriterResponse) throws -> Operations.GetModelCustomizationResponse {
    var responseObject = Operations.GetModelCustomizationResponse(
        contentType: response.contentType,
        statusCode: response.statusCode,
        rawResponse: response.httpResponse
    )
    
    if responseObject.statusCode == 200 { 
        // res.headers = r.headers
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.modelCustomization = try JSONDecoder().decode(Shared.ModelCustomization.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    } else if [400, 401, 403, 404, 500].contains(responseObject.statusCode) { 
        // res.headers = r.headers
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.failResponse = try JSONDecoder().decode(Shared.FailResponse.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return responseObject
}

private func handleListModelCustomizationsResponse(response: WriterResponse) throws -> Operations.ListModelCustomizationsResponse {
    var responseObject = Operations.ListModelCustomizationsResponse(
        contentType: response.contentType,
        statusCode: response.statusCode,
        rawResponse: response.httpResponse
    )
    
    if responseObject.statusCode == 200 { 
        // res.headers = r.headers
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.customizationsResponse = try JSONDecoder().decode(Shared.CustomizationsResponse.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    } else if [400, 401, 403, 404, 500].contains(responseObject.statusCode) { 
        // res.headers = r.headers
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.failResponse = try JSONDecoder().decode(Shared.FailResponse.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return responseObject
}

