// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.


import Foundation

extension Client: DownloadTheCustomizedModelAPI { 
    public func fetchCustomizedModelFile(request: Operations.FetchCustomizedModelFileRequest) async throws -> Operations.FetchCustomizedModelFileResponse {
        return try await makeRequest(
            configureRequest: { configuration in
                try configureFetchCustomizedModelFileRequest(with: configuration, request: request)
            },
            handleResponse: handleFetchCustomizedModelFileResponse
        )
    }
}

// MARK: - Request Configuration

private func configureFetchCustomizedModelFileRequest(with configuration: URLRequestConfiguration, request: Operations.FetchCustomizedModelFileRequest) throws {
    configuration.path = "/llm/organization/{organizationId}/model/{modelId}/customization/{customizationId}/fetch"
    configuration.method = .get
    configuration.pathParameterSerializable = request
    configuration.telemetryHeader = .userAgent
}

// MARK: - Response Handlers

private func handleFetchCustomizedModelFileResponse(response: WriterResponse) throws -> Operations.FetchCustomizedModelFileResponse {
    var responseObject = Operations.FetchCustomizedModelFileResponse(
        contentType: response.contentType,
        statusCode: response.statusCode,
        rawResponse: response.httpResponse
    )
    
    if responseObject.statusCode == 200 { 
        // res.headers = r.headers
        if response.contentType.matchContentType(pattern: "application/octet-stream"), let data = response.data {
            responseObject.fetchCustomizedModelFile200ApplicationOctetStreamBinaryString = data
        }
    } else if [400, 401, 403, 404, 500].contains(responseObject.statusCode) { 
        // res.headers = r.headers
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.failResponse = try JSONDecoder().decode(Shared.FailResponse.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return responseObject
}

