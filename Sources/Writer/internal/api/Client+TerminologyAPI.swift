// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.


import Foundation

extension Client: TerminologyAPI { 
    public func addTerms(request: Operations.AddTermsRequest) async throws -> Operations.AddTermsResponse {
        return try await makeRequest(
            configureRequest: { configuration in
                try configureAddTermsRequest(with: configuration, request: request)
            },
            handleResponse: handleAddTermsResponse
        )
    }
    public func deleteTerms(request: Operations.DeleteTermsRequest) async throws -> Operations.DeleteTermsResponse {
        return try await makeRequest(
            configureRequest: { configuration in
                try configureDeleteTermsRequest(with: configuration, request: request)
            },
            handleResponse: handleDeleteTermsResponse
        )
    }
    public func findTerms(request: Operations.FindTermsRequest) async throws -> Operations.FindTermsResponse {
        return try await makeRequest(
            configureRequest: { configuration in
                try configureFindTermsRequest(with: configuration, request: request)
            },
            handleResponse: handleFindTermsResponse
        )
    }
    public func updateTerms(request: Operations.UpdateTermsRequest) async throws -> Operations.UpdateTermsResponse {
        return try await makeRequest(
            configureRequest: { configuration in
                try configureUpdateTermsRequest(with: configuration, request: request)
            },
            handleResponse: handleUpdateTermsResponse
        )
    }
}

// MARK: - Request Configuration

private func configureAddTermsRequest(with configuration: URLRequestConfiguration, request: Operations.AddTermsRequest) throws {
    configuration.path = "/terminology/organization/{organizationId}/team/{teamId}"
    configuration.method = .post
    configuration.pathParameterSerializable = request
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request.createTermsRequest)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .userAgent
}

private func configureDeleteTermsRequest(with configuration: URLRequestConfiguration, request: Operations.DeleteTermsRequest) throws {
    configuration.path = "/terminology/organization/{organizationId}/team/{teamId}"
    configuration.method = .delete
    configuration.pathParameterSerializable = request
    configuration.queryParameterSerializable = request
    configuration.headerParameterSerializable = request
    configuration.telemetryHeader = .userAgent
}

private func configureFindTermsRequest(with configuration: URLRequestConfiguration, request: Operations.FindTermsRequest) throws {
    configuration.path = "/terminology/organization/{organizationId}/team/{teamId}"
    configuration.method = .get
    configuration.pathParameterSerializable = request
    configuration.queryParameterSerializable = request
    configuration.telemetryHeader = .userAgent
}

private func configureUpdateTermsRequest(with configuration: URLRequestConfiguration, request: Operations.UpdateTermsRequest) throws {
    configuration.path = "/terminology/organization/{organizationId}/team/{teamId}"
    configuration.method = .put
    configuration.pathParameterSerializable = request
    configuration.headerParameterSerializable = request
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request.updateTermsRequest)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .userAgent
}

// MARK: - Response Handlers

private func handleAddTermsResponse(response: WriterResponse) throws -> Operations.AddTermsResponse {
    var responseObject = Operations.AddTermsResponse(
        contentType: response.contentType,
        statusCode: response.statusCode,
        rawResponse: response.httpResponse
    )
    
    if responseObject.statusCode == 200 { 
        // res.headers = r.headers
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.createTermsResponse = try JSONDecoder().decode(Shared.CreateTermsResponse.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    } else if [400, 401, 403, 404, 500].contains(responseObject.statusCode) { 
        // res.headers = r.headers
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.failResponse = try JSONDecoder().decode(Shared.FailResponse.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return responseObject
}

private func handleDeleteTermsResponse(response: WriterResponse) throws -> Operations.DeleteTermsResponse {
    var responseObject = Operations.DeleteTermsResponse(
        contentType: response.contentType,
        statusCode: response.statusCode,
        rawResponse: response.httpResponse
    )
    
    if responseObject.statusCode == 200 { 
        // res.headers = r.headers
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.deleteResponse = try JSONDecoder().decode(Shared.DeleteResponse.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    } else if [400, 401, 403, 404, 500].contains(responseObject.statusCode) { 
        // res.headers = r.headers
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.failResponse = try JSONDecoder().decode(Shared.FailResponse.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return responseObject
}

private func handleFindTermsResponse(response: WriterResponse) throws -> Operations.FindTermsResponse {
    var responseObject = Operations.FindTermsResponse(
        contentType: response.contentType,
        statusCode: response.statusCode,
        rawResponse: response.httpResponse
    )
    
    if responseObject.statusCode == 200 { 
        // res.headers = r.headers
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.paginatedResultFullTermWithUser = try JSONDecoder().decode(Shared.PaginatedResultFullTermWithUser.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    } else if [400, 401, 403, 404, 500].contains(responseObject.statusCode) { 
        // res.headers = r.headers
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.failResponse = try JSONDecoder().decode(Shared.FailResponse.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return responseObject
}

private func handleUpdateTermsResponse(response: WriterResponse) throws -> Operations.UpdateTermsResponse {
    var responseObject = Operations.UpdateTermsResponse(
        contentType: response.contentType,
        statusCode: response.statusCode,
        rawResponse: response.httpResponse
    )
    
    if responseObject.statusCode == 200 { 
        // res.headers = r.headers
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.createTermsResponse = try JSONDecoder().decode(Shared.CreateTermsResponse.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    } else if [400, 401, 403, 404, 500].contains(responseObject.statusCode) { 
        // res.headers = r.headers
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.failResponse = try JSONDecoder().decode(Shared.FailResponse.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return responseObject
}

