// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.


import Foundation

extension Client: CompletionsAPI { 
    public func createCompletion(request: Operations.CreateCompletionRequest) async throws -> Operations.CreateCompletionResponse {
        return try await makeRequest(
            configureRequest: { configuration in
                try configureCreateCompletionRequest(with: configuration, request: request)
            },
            handleResponse: handleCreateCompletionResponse
        )
    }
    public func createModelCustomizationCompletion(request: Operations.CreateModelCustomizationCompletionRequest) async throws -> Operations.CreateModelCustomizationCompletionResponse {
        return try await makeRequest(
            configureRequest: { configuration in
                try configureCreateModelCustomizationCompletionRequest(with: configuration, request: request)
            },
            handleResponse: handleCreateModelCustomizationCompletionResponse
        )
    }
}

// MARK: - Request Configuration

private func configureCreateCompletionRequest(with configuration: URLRequestConfiguration, request: Operations.CreateCompletionRequest) throws {
    configuration.path = "/llm/organization/{organizationId}/model/{modelId}/completions"
    configuration.method = .post
    configuration.pathParameterSerializable = request
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request.completionRequest)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .userAgent
}

private func configureCreateModelCustomizationCompletionRequest(with configuration: URLRequestConfiguration, request: Operations.CreateModelCustomizationCompletionRequest) throws {
    configuration.path = "/llm/organization/{organizationId}/model/{modelId}/customization/{customizationId}/completions"
    configuration.method = .post
    configuration.pathParameterSerializable = request
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request.completionRequest)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .userAgent
}

// MARK: - Response Handlers

private func handleCreateCompletionResponse(response: WriterResponse) throws -> Operations.CreateCompletionResponse {
    var responseObject = Operations.CreateCompletionResponse(
        contentType: response.contentType,
        statusCode: response.statusCode,
        rawResponse: response.httpResponse
    )
    
    if responseObject.statusCode == 200 { 
        // res.headers = r.headers
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.completionResponse = try JSONDecoder().decode(Shared.CompletionResponse.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    } else if [400, 401, 403, 404, 500].contains(responseObject.statusCode) { 
        // res.headers = r.headers
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.failResponse = try JSONDecoder().decode(Shared.FailResponse.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return responseObject
}

private func handleCreateModelCustomizationCompletionResponse(response: WriterResponse) throws -> Operations.CreateModelCustomizationCompletionResponse {
    var responseObject = Operations.CreateModelCustomizationCompletionResponse(
        contentType: response.contentType,
        statusCode: response.statusCode,
        rawResponse: response.httpResponse
    )
    
    if responseObject.statusCode == 200 { 
        // res.headers = r.headers
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.completionResponse = try JSONDecoder().decode(Shared.CompletionResponse.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    } else if [400, 401, 403, 404, 500].contains(responseObject.statusCode) { 
        // res.headers = r.headers
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.failResponse = try JSONDecoder().decode(Shared.FailResponse.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return responseObject
}

