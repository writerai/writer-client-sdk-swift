// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

import Foundation

/// Top-level type used for grouping operations models
///
/// > Note: You do not need to interact with this type directly.
public struct Operations {
    private init() {}

    /// A request model
    public struct DetectContentRequest: APIValue {
        public let contentDetectorRequest: Shared.ContentDetectorRequest
        public let organizationId: Int?

        /// Creates a request model with the specified parameters
        ///
        ///
        public init(contentDetectorRequest: Shared.ContentDetectorRequest, organizationId: Int? = nil) {
            self.contentDetectorRequest = contentDetectorRequest
            self.organizationId = organizationId
        }
    }

    /// A response model
    public struct DetectContentResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
        public internal(set) var contentDetectorResponses: [Shared.ContentDetectorResponse]?
            /// Bad Request
        public internal(set) var failResponse: Shared.FailResponse?
        public internal(set) var headers: [String: [String]]?
        public internal(set) var rawResponse: HTTPURLResponse?
    }

    /// A response model
    public struct GetSubscriptionDetailsResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
            /// Bad Request
        public internal(set) var failResponse: Shared.FailResponse?
        public internal(set) var headers: [String: [String]]?
        public internal(set) var rawResponse: HTTPURLResponse?
        public internal(set) var subscriptionPublicResponseApi: Shared.SubscriptionPublicResponseApi?
    }

    /// A request model
    public struct GenerateContentRequest: APIValue {
        public let generateTemplateRequest: Shared.GenerateTemplateRequest
        public let teamId: Int
        public let organizationId: Int?

        /// Creates a request model with the specified parameters
        ///
        ///
        public init(generateTemplateRequest: Shared.GenerateTemplateRequest, teamId: Int, organizationId: Int? = nil) {
            self.generateTemplateRequest = generateTemplateRequest
            self.teamId = teamId
            self.organizationId = organizationId
        }
    }

    /// A response model
    public struct GenerateContentResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
        public internal(set) var draft: Shared.Draft?
            /// Bad Request
        public internal(set) var failResponse: Shared.FailResponse?
        public internal(set) var headers: [String: [String]]?
        public internal(set) var rawResponse: HTTPURLResponse?
    }

    /// A request model
    public struct ListTemplatesRequest: APIValue {
        public let teamId: Int
        public let templateId: String
        public let organizationId: Int?

        /// Creates a request model with the specified parameters
        ///
        ///
        public init(teamId: Int, templateId: String, organizationId: Int? = nil) {
            self.teamId = teamId
            self.templateId = templateId
            self.organizationId = organizationId
        }
    }

    /// A response model
    public struct ListTemplatesResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
            /// Bad Request
        public internal(set) var failResponse: Shared.FailResponse?
        public internal(set) var headers: [String: [String]]?
        public internal(set) var rawResponse: HTTPURLResponse?
        public internal(set) var templateDetailsResponse: Shared.TemplateDetailsResponse?
    }

    /// A request model
    public struct CreateCompletionRequest: APIValue {
        public let completionRequest: Shared.CompletionRequest
        public let modelId: String
        public let organizationId: Int?

        /// Creates a request model with the specified parameters
        ///
        ///
        public init(completionRequest: Shared.CompletionRequest, modelId: String, organizationId: Int? = nil) {
            self.completionRequest = completionRequest
            self.modelId = modelId
            self.organizationId = organizationId
        }
    }

    /// A response model
    public struct CreateCompletionResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
        public internal(set) var completionResponse: Shared.CompletionResponse?
            /// Bad Request
        public internal(set) var failResponse: Shared.FailResponse?
        public internal(set) var headers: [String: [String]]?
        public internal(set) var rawResponse: HTTPURLResponse?
    }

    /// A request model
    public struct CreateModelCustomizationCompletionRequest: APIValue {
        public let completionRequest: Shared.CompletionRequest
        public let customizationId: String
        public let modelId: String
        public let organizationId: Int?

        /// Creates a request model with the specified parameters
        ///
        ///
        public init(completionRequest: Shared.CompletionRequest, customizationId: String, modelId: String, organizationId: Int? = nil) {
            self.completionRequest = completionRequest
            self.customizationId = customizationId
            self.modelId = modelId
            self.organizationId = organizationId
        }
    }

    /// A response model
    public struct CreateModelCustomizationCompletionResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
        public internal(set) var completionResponse: Shared.CompletionResponse?
            /// Bad Request
        public internal(set) var failResponse: Shared.FailResponse?
        public internal(set) var headers: [String: [String]]?
        public internal(set) var rawResponse: HTTPURLResponse?
    }

    /// A request model
    public struct ContentCheckRequest: APIValue {
        public let contentRequest: Shared.ContentRequest
        public let teamId: Int
        public let organizationId: Int?

        /// Creates a request model with the specified parameters
        ///
        ///
        public init(contentRequest: Shared.ContentRequest, teamId: Int, organizationId: Int? = nil) {
            self.contentRequest = contentRequest
            self.teamId = teamId
            self.organizationId = organizationId
        }
    }

    /// A response model
    public struct ContentCheckResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
            /// Bad Request
        public internal(set) var failResponse: Shared.FailResponse?
        public internal(set) var headers: [String: [String]]?
        public internal(set) var processedContent: Shared.ProcessedContent?
        public internal(set) var rawResponse: HTTPURLResponse?
    }

    /// A request model
    public struct ContentCorrectRequest: APIValue {
        public let contentRequest: Shared.ContentRequest
        public let teamId: Int
        public let organizationId: Int?
        public let xRequestID: String?

        /// Creates a request model with the specified parameters
        ///
        ///
        public init(contentRequest: Shared.ContentRequest, teamId: Int, organizationId: Int? = nil, xRequestID: String? = nil) {
            self.contentRequest = contentRequest
            self.teamId = teamId
            self.organizationId = organizationId
            self.xRequestID = xRequestID
        }
    }

    /// A response model
    public struct ContentCorrectResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
        public internal(set) var correctionResponse: Shared.CorrectionResponse?
            /// Bad Request
        public internal(set) var failResponse: Shared.FailResponse?
        public internal(set) var headers: [String: [String]]?
        public internal(set) var rawResponse: HTTPURLResponse?
    }

    /// A request model
    public struct FetchCustomizedModelFileRequest: APIValue {
        public let customizationId: String
        public let modelId: String
        public let organizationId: Int?

        /// Creates a request model with the specified parameters
        ///
        ///
        public init(customizationId: String, modelId: String, organizationId: Int? = nil) {
            self.customizationId = customizationId
            self.modelId = modelId
            self.organizationId = organizationId
        }
    }

    /// A response model
    public struct FetchCustomizedModelFileResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
            /// Bad Request
        public internal(set) var failResponse: Shared.FailResponse?
        public internal(set) var fetchCustomizedModelFile200ApplicationOctetStreamBinaryString: Data?
        public internal(set) var headers: [String: [String]]?
        public internal(set) var rawResponse: HTTPURLResponse?
    }

    /// A request model
    public struct DeleteFileRequest: APIValue {
        public let fileId: String
        public let organizationId: Int?

        /// Creates a request model with the specified parameters
        ///
        ///
        public init(fileId: String, organizationId: Int? = nil) {
            self.fileId = fileId
            self.organizationId = organizationId
        }
    }

    /// A model object
    public struct DeleteFile200ApplicationJSON {

        /// Creates an object
        ///
        ///
        public init() {
        }
    }

    /// A response model
    public struct DeleteFileResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
        public internal(set) var deleteFile200ApplicationJSONObject: Operations.DeleteFile200ApplicationJSON?
            /// Bad Request
        public internal(set) var failResponse: Shared.FailResponse?
        public internal(set) var headers: [String: [String]]?
        public internal(set) var rawResponse: HTTPURLResponse?
    }

    /// A request model
    public struct GetFileRequest: APIValue {
        public let fileId: String
        public let organizationId: Int?

        /// Creates a request model with the specified parameters
        ///
        ///
        public init(fileId: String, organizationId: Int? = nil) {
            self.fileId = fileId
            self.organizationId = organizationId
        }
    }

    /// A response model
    public struct GetFileResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
            /// Bad Request
        public internal(set) var failResponse: Shared.FailResponse?
        public internal(set) var headers: [String: [String]]?
        public internal(set) var modelFile: Shared.ModelFile?
        public internal(set) var rawResponse: HTTPURLResponse?
    }

    /// A request model
    public struct ListFilesRequest: APIValue {
        public let organizationId: Int?

        /// Creates a request model with the specified parameters
        ///
        ///
        public init(organizationId: Int? = nil) {
            self.organizationId = organizationId
        }
    }

    /// A response model
    public struct ListFilesResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
            /// Bad Request
        public internal(set) var failResponse: Shared.FailResponse?
        public internal(set) var headers: [String: [String]]?
        public internal(set) var modelFilesResponse: Shared.ModelFilesResponse?
        public internal(set) var rawResponse: HTTPURLResponse?
    }

    /// A request model
    public struct UploadFileRequest: APIValue {
        public let uploadModelFileRequest: Shared.UploadModelFileRequest
        public let organizationId: Int?

        /// Creates a request model with the specified parameters
        ///
        ///
        public init(uploadModelFileRequest: Shared.UploadModelFileRequest, organizationId: Int? = nil) {
            self.uploadModelFileRequest = uploadModelFileRequest
            self.organizationId = organizationId
        }
    }

    /// A response model
    public struct UploadFileResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
            /// Bad Request
        public internal(set) var failResponse: Shared.FailResponse?
        public internal(set) var headers: [String: [String]]?
        public internal(set) var modelFile: Shared.ModelFile?
        public internal(set) var rawResponse: HTTPURLResponse?
    }

    /// A request model
    public struct CreateModelCustomizationRequest: APIValue {
        public let createCustomizationRequest: Shared.CreateCustomizationRequest
        public let modelId: String
        public let organizationId: Int?

        /// Creates a request model with the specified parameters
        ///
        ///
        public init(createCustomizationRequest: Shared.CreateCustomizationRequest, modelId: String, organizationId: Int? = nil) {
            self.createCustomizationRequest = createCustomizationRequest
            self.modelId = modelId
            self.organizationId = organizationId
        }
    }

    /// A response model
    public struct CreateModelCustomizationResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
            /// Bad Request
        public internal(set) var failResponse: Shared.FailResponse?
        public internal(set) var headers: [String: [String]]?
        public internal(set) var modelCustomization: Shared.ModelCustomization?
        public internal(set) var rawResponse: HTTPURLResponse?
    }

    /// A request model
    public struct DeleteModelCustomizationRequest: APIValue {
        public let customizationId: String
        public let modelId: String
        public let organizationId: Int?

        /// Creates a request model with the specified parameters
        ///
        ///
        public init(customizationId: String, modelId: String, organizationId: Int? = nil) {
            self.customizationId = customizationId
            self.modelId = modelId
            self.organizationId = organizationId
        }
    }

    /// A model object
    public struct DeleteModelCustomization200ApplicationJSON {

        /// Creates an object
        ///
        ///
        public init() {
        }
    }

    /// A response model
    public struct DeleteModelCustomizationResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
        public internal(set) var deleteModelCustomization200ApplicationJSONObject: Operations.DeleteModelCustomization200ApplicationJSON?
            /// Bad Request
        public internal(set) var failResponse: Shared.FailResponse?
        public internal(set) var headers: [String: [String]]?
        public internal(set) var rawResponse: HTTPURLResponse?
    }

    /// A request model
    public struct GetModelCustomizationRequest: APIValue {
        public let customizationId: String
        public let modelId: String
        public let organizationId: Int?

        /// Creates a request model with the specified parameters
        ///
        ///
        public init(customizationId: String, modelId: String, organizationId: Int? = nil) {
            self.customizationId = customizationId
            self.modelId = modelId
            self.organizationId = organizationId
        }
    }

    /// A response model
    public struct GetModelCustomizationResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
            /// Bad Request
        public internal(set) var failResponse: Shared.FailResponse?
        public internal(set) var headers: [String: [String]]?
        public internal(set) var modelCustomization: Shared.ModelCustomization?
        public internal(set) var rawResponse: HTTPURLResponse?
    }

    /// A request model
    public struct ListModelCustomizationsRequest: APIValue {
        public let modelId: String
        public let organizationId: Int?

        /// Creates a request model with the specified parameters
        ///
        ///
        public init(modelId: String, organizationId: Int? = nil) {
            self.modelId = modelId
            self.organizationId = organizationId
        }
    }

    /// A response model
    public struct ListModelCustomizationsResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
        public internal(set) var customizationsResponse: Shared.CustomizationsResponse?
            /// Bad Request
        public internal(set) var failResponse: Shared.FailResponse?
        public internal(set) var headers: [String: [String]]?
        public internal(set) var rawResponse: HTTPURLResponse?
    }

    /// A request model
    public struct ListModelsRequest: APIValue {
        public let organizationId: Int?

        /// Creates a request model with the specified parameters
        ///
        ///
        public init(organizationId: Int? = nil) {
            self.organizationId = organizationId
        }
    }

    /// A response model
    public struct ListModelsResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
            /// Bad Request
        public internal(set) var failResponse: Shared.FailResponse?
        public internal(set) var generationModelsResponse: Shared.GenerationModelsResponse?
        public internal(set) var headers: [String: [String]]?
        public internal(set) var rawResponse: HTTPURLResponse?
    }

    /// A request model
    public struct DeleteSnippetsRequest: APIValue {
        public let teamId: Int
        public let ids: [String]?
        public let organizationId: Int?
        public let xRequestID: String?

        /// Creates a request model with the specified parameters
        ///
        ///
        public init(teamId: Int, ids: [String]? = nil, organizationId: Int? = nil, xRequestID: String? = nil) {
            self.teamId = teamId
            self.ids = ids
            self.organizationId = organizationId
            self.xRequestID = xRequestID
        }
    }

    /// A response model
    public struct DeleteSnippetsResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
        public internal(set) var deleteResponse: Shared.DeleteResponse?
            /// Bad Request
        public internal(set) var failResponse: Shared.FailResponse?
        public internal(set) var headers: [String: [String]]?
        public internal(set) var rawResponse: HTTPURLResponse?
    }


    public enum FindSnippetsSortField: String, Codable, APIValue {
        case shortcut = "shortcut"
        case creationTime = "creationTime"
        case modificationTime = "modificationTime"
    }


    public enum FindSnippetsSortOrder: String, Codable, APIValue {
        case asc = "asc"
        case desc = "desc"
    }

    /// A request model
    public struct FindSnippetsRequest: APIValue {
        public let teamId: Int
        public let limit: Int?
        public let offset: Int?
        public let organizationId: Int?
        public let search: String?
        public let shortcuts: [String]?
        public let sortField: Operations.FindSnippetsSortField?
        public let sortOrder: Operations.FindSnippetsSortOrder?
        public let tags: [String]?

        /// Creates a request model with the specified parameters
        ///
        ///
        public init(teamId: Int, limit: Int? = nil, offset: Int? = nil, organizationId: Int? = nil, search: String? = nil, shortcuts: [String]? = nil, sortField: Operations.FindSnippetsSortField? = nil, sortOrder: Operations.FindSnippetsSortOrder? = nil, tags: [String]? = nil) {
            self.teamId = teamId
            self.limit = limit
            self.offset = offset
            self.organizationId = organizationId
            self.search = search
            self.shortcuts = shortcuts
            self.sortField = sortField
            self.sortOrder = sortOrder
            self.tags = tags
        }
    }

    /// A response model
    public struct FindSnippetsResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
            /// Bad Request
        public internal(set) var failResponse: Shared.FailResponse?
        public internal(set) var headers: [String: [String]]?
        public internal(set) var paginatedResultSnippetWithUser: Shared.PaginatedResultSnippetWithUser?
        public internal(set) var rawResponse: HTTPURLResponse?
    }

    /// A request model
    public struct UpdateSnippetsRequest: APIValue {
        public let teamId: Int
        public let organizationId: Int?
        public let requestBody: [Shared.SnippetUpdate]?
        public let xRequestID: String?

        /// Creates a request model with the specified parameters
        ///
        ///
        public init(teamId: Int, organizationId: Int? = nil, requestBody: [Shared.SnippetUpdate]? = nil, xRequestID: String? = nil) {
            self.teamId = teamId
            self.organizationId = organizationId
            self.requestBody = requestBody
            self.xRequestID = xRequestID
        }
    }

    /// A response model
    public struct UpdateSnippetsResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
            /// Bad Request
        public internal(set) var failResponse: Shared.FailResponse?
        public internal(set) var headers: [String: [String]]?
        public internal(set) var rawResponse: HTTPURLResponse?
        public internal(set) var snippetWithUsers: [Shared.SnippetWithUser]?
    }

    /// A request model
    public struct PageDetailsRequest: APIValue {
        public let pageId: Int

        /// Creates a request model with the specified parameters
        ///
        ///
        public init(pageId: Int) {
            self.pageId = pageId
        }
    }

    /// A response model
    public struct PageDetailsResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
            /// Bad Request
        public internal(set) var failResponse: Shared.FailResponse?
        public internal(set) var headers: [String: [String]]?
        public internal(set) var pageWithSectionResponse: Shared.PageWithSectionResponse?
        public internal(set) var rawResponse: HTTPURLResponse?
    }


    public enum ListPagesStatus: String, Codable, APIValue {
        case live = "live"
        case offline = "offline"
    }

    /// A request model
    public struct ListPagesRequest: APIValue {
        public let limit: Int?
        public let offset: Int?
        public let status: Operations.ListPagesStatus?

        /// Creates a request model with the specified parameters
        ///
        ///
        public init(limit: Int? = nil, offset: Int? = nil, status: Operations.ListPagesStatus? = nil) {
            self.limit = limit
            self.offset = offset
            self.status = status
        }
    }

    /// A response model
    public struct ListPagesResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
            /// Bad Request
        public internal(set) var failResponse: Shared.FailResponse?
        public internal(set) var headers: [String: [String]]?
        public internal(set) var paginatedResultPagePublicApiResponse: Shared.PaginatedResultPagePublicApiResponse?
        public internal(set) var rawResponse: HTTPURLResponse?
    }

    /// A request model
    public struct AddTermsRequest: APIValue {
        public let createTermsRequest: Shared.CreateTermsRequest
        public let teamId: Int
        public let organizationId: Int?

        /// Creates a request model with the specified parameters
        ///
        ///
        public init(createTermsRequest: Shared.CreateTermsRequest, teamId: Int, organizationId: Int? = nil) {
            self.createTermsRequest = createTermsRequest
            self.teamId = teamId
            self.organizationId = organizationId
        }
    }

    /// A response model
    public struct AddTermsResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
        public internal(set) var createTermsResponse: Shared.CreateTermsResponse?
            /// Bad Request
        public internal(set) var failResponse: Shared.FailResponse?
        public internal(set) var headers: [String: [String]]?
        public internal(set) var rawResponse: HTTPURLResponse?
    }

    /// A request model
    public struct DeleteTermsRequest: APIValue {
        public let teamId: Int
        public let ids: [Int]?
        public let organizationId: Int?
        public let xRequestID: String?

        /// Creates a request model with the specified parameters
        ///
        ///
        public init(teamId: Int, ids: [Int]? = nil, organizationId: Int? = nil, xRequestID: String? = nil) {
            self.teamId = teamId
            self.ids = ids
            self.organizationId = organizationId
            self.xRequestID = xRequestID
        }
    }

    /// A response model
    public struct DeleteTermsResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
        public internal(set) var deleteResponse: Shared.DeleteResponse?
            /// Bad Request
        public internal(set) var failResponse: Shared.FailResponse?
        public internal(set) var headers: [String: [String]]?
        public internal(set) var rawResponse: HTTPURLResponse?
    }


    public enum FindTermsPartOfSpeech: String, Codable, APIValue {
        case noun = "noun"
        case verb = "verb"
        case adverb = "adverb"
        case adjective = "adjective"
    }


    public enum FindTermsSortField: String, Codable, APIValue {
        case term = "term"
        case creationTime = "creationTime"
        case modificationTime = "modificationTime"
        case type = "type"
    }


    public enum FindTermsSortOrder: String, Codable, APIValue {
        case asc = "asc"
        case desc = "desc"
    }


    public enum FindTermsType: String, Codable, APIValue {
        case approved = "approved"
        case banned = "banned"
        case pending = "pending"
    }

    /// A request model
    public struct FindTermsRequest: APIValue {
        public let teamId: Int
        public let limit: Int?
        public let offset: Int?
        public let organizationId: Int?
        public let partOfSpeech: Operations.FindTermsPartOfSpeech?
        public let sortField: Operations.FindTermsSortField?
        public let sortOrder: Operations.FindTermsSortOrder?
        public let tags: [String]?
        public let term: String?
        public let type: Operations.FindTermsType?

        /// Creates a request model with the specified parameters
        ///
        ///
        public init(teamId: Int, limit: Int? = nil, offset: Int? = nil, organizationId: Int? = nil, partOfSpeech: Operations.FindTermsPartOfSpeech? = nil, sortField: Operations.FindTermsSortField? = nil, sortOrder: Operations.FindTermsSortOrder? = nil, tags: [String]? = nil, term: String? = nil, type: Operations.FindTermsType? = nil) {
            self.teamId = teamId
            self.limit = limit
            self.offset = offset
            self.organizationId = organizationId
            self.partOfSpeech = partOfSpeech
            self.sortField = sortField
            self.sortOrder = sortOrder
            self.tags = tags
            self.term = term
            self.type = type
        }
    }

    /// A response model
    public struct FindTermsResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
            /// Bad Request
        public internal(set) var failResponse: Shared.FailResponse?
        public internal(set) var headers: [String: [String]]?
        public internal(set) var paginatedResultFullTermWithUser: Shared.PaginatedResultFullTermWithUser?
        public internal(set) var rawResponse: HTTPURLResponse?
    }

    /// A request model
    public struct UpdateTermsRequest: APIValue {
        public let teamId: Int
        public let updateTermsRequest: Shared.UpdateTermsRequestShared
        public let organizationId: Int?
        public let xRequestID: String?

        /// Creates a request model with the specified parameters
        ///
        ///
        public init(teamId: Int, updateTermsRequest: Shared.UpdateTermsRequestShared, organizationId: Int? = nil, xRequestID: String? = nil) {
            self.teamId = teamId
            self.updateTermsRequest = updateTermsRequest
            self.organizationId = organizationId
            self.xRequestID = xRequestID
        }
    }

    /// A response model
    public struct UpdateTermsResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
        public internal(set) var createTermsResponse: Shared.CreateTermsResponse?
            /// Bad Request
        public internal(set) var failResponse: Shared.FailResponse?
        public internal(set) var headers: [String: [String]]?
        public internal(set) var rawResponse: HTTPURLResponse?
    }


    public enum ListUsersSortField: String, Codable, APIValue {
        case id = "id"
        case name = "name"
        case creationTime = "creationTime"
        case deleted = "deleted"
        case modificationTime = "modificationTime"
        case email = "email"
        case lastSeen = "lastSeen"
    }


    public enum ListUsersSortOrder: String, Codable, APIValue {
        case asc = "asc"
        case desc = "desc"
    }

    /// A request model
    public struct ListUsersRequest: APIValue {
        public let limit: Int?
        public let offset: Int?
        public let search: String?
        public let sortField: Operations.ListUsersSortField?
        public let sortOrder: Operations.ListUsersSortOrder?

        /// Creates a request model with the specified parameters
        ///
        ///
        public init(limit: Int? = nil, offset: Int? = nil, search: String? = nil, sortField: Operations.ListUsersSortField? = nil, sortOrder: Operations.ListUsersSortOrder? = nil) {
            self.limit = limit
            self.offset = offset
            self.search = search
            self.sortField = sortField
            self.sortOrder = sortOrder
        }
    }

    /// A response model
    public struct ListUsersResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
            /// Bad Request
        public internal(set) var failResponse: Shared.FailResponse?
        public internal(set) var headers: [String: [String]]?
        public internal(set) var paginatedResultUserPublicResponse: Shared.PaginatedResultUserPublicResponse?
        public internal(set) var rawResponse: HTTPURLResponse?
    }

    /// A request model
    public struct GetDocumentDetailsRequest: APIValue {
        public let documentId: Int
        public let teamId: Int
        public let organizationId: Int?

        /// Creates a request model with the specified parameters
        ///
        ///
        public init(documentId: Int, teamId: Int, organizationId: Int? = nil) {
            self.documentId = documentId
            self.teamId = teamId
            self.organizationId = organizationId
        }
    }

    /// A response model
    public struct GetDocumentDetailsResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
        public internal(set) var document: Shared.Document?
            /// Bad Request
        public internal(set) var failResponse: Shared.FailResponse?
        public internal(set) var headers: [String: [String]]?
        public internal(set) var rawResponse: HTTPURLResponse?
    }


    public enum ListTeamDocumentsSortField: String, Codable, APIValue {
        case title = "title"
        case creationTime = "creationTime"
        case modificationTime = "modificationTime"
        case modifiedByMeTime = "modifiedByMeTime"
        case openedByMeTime = "openedByMeTime"
    }


    public enum ListTeamDocumentsSortOrder: String, Codable, APIValue {
        case asc = "asc"
        case desc = "desc"
    }

    /// A request model
    public struct ListTeamDocumentsRequest: APIValue {
        public let teamId: Int
        public let limit: Int?
        public let offset: Int?
        public let organizationId: Int?
        public let search: String?
        public let sortField: Operations.ListTeamDocumentsSortField?
        public let sortOrder: Operations.ListTeamDocumentsSortOrder?

        /// Creates a request model with the specified parameters
        ///
        ///
        public init(teamId: Int, limit: Int? = nil, offset: Int? = nil, organizationId: Int? = nil, search: String? = nil, sortField: Operations.ListTeamDocumentsSortField? = nil, sortOrder: Operations.ListTeamDocumentsSortOrder? = nil) {
            self.teamId = teamId
            self.limit = limit
            self.offset = offset
            self.organizationId = organizationId
            self.search = search
            self.sortField = sortField
            self.sortOrder = sortOrder
        }
    }

    /// A response model
    public struct ListTeamDocumentsResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
        public internal(set) var briefDocuments: Shared.BriefDocuments?
            /// Bad Request
        public internal(set) var failResponse: Shared.FailResponse?
        public internal(set) var headers: [String: [String]]?
        public internal(set) var rawResponse: HTTPURLResponse?
    }

}

extension Operations.DeleteFile200ApplicationJSON: Codable {
}

extension Operations.DeleteModelCustomization200ApplicationJSON: Codable {
}